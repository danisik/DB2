------------------------------
-- SMAZANI TABULEK.
------------------------------

DROP TABLE IF EXISTS TAH CASCADE;
DROP TABLE IF EXISTS RADKY_HRY CASCADE;
DROP TABLE IF EXISTS HRA CASCADE;
DROP TABLE IF EXISTS OMEZENI;
DROP TABLE IF EXISTS STAV;
DROP TABLE IF EXISTS HRAC CASCADE;


------------------------------
-- VYTVORENI NOVYCH TABULEK.
------------------------------


CREATE TABLE OMEZENI (
	ID INTEGER NOT NULL,
	MIN_SIRKA INTEGER NOT NULL,
	MIN_VYSKA INTEGER NOT NULL,
	MIN_VELIKOST_RADY INTEGER NOT NULL,
	MAX_SIRKA INTEGER NOT NULL,
	MAX_VYSKA INTEGER NOT NULL,	
	MAX_VELIKOST_RADY INTEGER NOT NULL,
	
	PRIMARY KEY(ID) 
);

CREATE TABLE STAV (
	ID INTEGER NOT NULL,
	NAZEV VARCHAR(50),
	
	PRIMARY KEY(ID) 
);

CREATE TABLE HRAC (
	ID INTEGER NOT NULL,
	JMENO VARCHAR(255),
	TAH_PRVNI_POCET_VYHER INTEGER NOT NULL,
	TAH_PRVNI_POCET_REMIZ INTEGER NOT NULL,
	TAH_PRVNI_POCET_PROHER INTEGER NOT NULL,
	TAH_DRUHY_POCET_VYHER INTEGER NOT NULL,
	TAH_DRUHY_POCET_REMIZ INTEGER NOT NULL,
	TAH_DRUHY_POCET_PROHER INTEGER NOT NULL,
	
	PRIMARY KEY(ID) 
);

CREATE TABLE HRA (
	ID INTEGER NOT NULL,
	SIRKA INTEGER NOT NULL,
	VYSKA INTEGER NOT NULL,
	VELIKOST_RADY INTEGER NOT NULL,
	ID_STAV INTEGER NOT NULL,	
	ZACATEK_HRY TIMESTAMP(6) NOT NULL,
	ID_PRVNI_HRAC INTEGER NOT NULL,
	CAS_PRVNI_HRAC INTEGER NOT NULL,
	ID_DRUHY_HRAC INTEGER NOT NULL,
	CAS_DRUHY_HRAC INTEGER NOT NULL,
	
	PRIMARY KEY(ID),
	FOREIGN KEY(ID_STAV) REFERENCES STAV(ID),
	FOREIGN KEY(ID_PRVNI_HRAC) REFERENCES HRAC(ID),
	FOREIGN KEY(ID_DRUHY_HRAC) REFERENCES HRAC(ID)
);

CREATE TABLE TAH (
	ID INTEGER NOT NULL,
	CAS_TAHU TIMESTAMP(6) NOT NULL,
	ID_AKTUALNI_HRA INTEGER NOT NULL,
	ID_HRAJICI_HRAC INTEGER NOT NULL,
	X INTEGER NOT NULL,
	Y INTEGER NOT NULL,
	
	PRIMARY KEY(ID),
	FOREIGN KEY(ID_AKTUALNI_HRA) REFERENCES HRA(ID),
	FOREIGN KEY(ID_HRAJICI_HRAC) REFERENCES HRAC(ID)
);

CREATE TABLE RADKY_HRY (
	ID INTEGER NOT NULL,
	ID_HRA INTEGER NOT NULL,
	CISLO_RADKY INTEGER NOT NULL,
	
	PRIMARY KEY(ID),
	FOREIGN KEY(ID_HRA) REFERENCES HRA(ID)
);


------------------------------
-- ZAKLADNI DATA PRO TABULKY.
------------------------------


INSERT INTO STAV VALUES (1, 'rozehraná');
INSERT INTO STAV VALUES (2, 'vítězství začínajícího hráče');
INSERT INTO STAV VALUES (3, 'prohra začínajícího hráče');
INSERT INTO STAV VALUES (4, 'remíza');

INSERT INTO OMEZENI VALUES (1, 5, 5, 5, 20, 20, 15);


------------------------------
-- VYTVORENI FUNKCI.
------------------------------


-- Kontrola vstupních parametrů.
CREATE OR REPLACE FUNCTION SPATNY_PARAMETR(POCET_RADKU INTEGER, POCET_SLOUPCU INTEGER, VELIKOST_RADY INTEGER) RETURNS INTEGER AS $$
	DECLARE		
		I_OMEZENI OMEZENI;
	BEGIN
		SELECT * INTO I_OMEZENI FROM OMEZENI;
		
		IF POCET_RADKU < I_OMEZENI.MIN_VYSKA THEN
			RETURN 1;
		END IF;
	
		IF POCET_RADKU > I_OMEZENI.MAX_VYSKA THEN
			RETURN 2;
		END IF;
	
		IF POCET_SLOUPCU < I_OMEZENI.MIN_SIRKA THEN
			RETURN 3;
		END IF;
	
		IF POCET_SLOUPCU > I_OMEZENI.MAX_SIRKA THEN
			RETURN 4;
		END IF;
	
		IF VELIKOST_RADY < I_OMEZENI.MIN_VELIKOST_RADY THEN
			RETURN 5;
		END IF;
	
		IF VELIKOST_RADY > I_OMEZENI.MAX_VELIKOST_RADY THEN
			RETURN 6;
		END IF;
	
		IF VELIKOST_RADY > POCET_SLOUPCU THEN
			RETURN 7;
		END IF;
	
		IF VELIKOST_RADY > POCET_RADKU THEN
			RETURN 8;
		END IF;
    
		RETURN 0;
	END;
	$$ LANGUAGE plpgsql;

-- Výpis řádku papíru dané hry.
CREATE OR REPLACE FUNCTION RADEK_PAPIRU(ID_HRA INTEGER, RADEK_HRY INTEGER) RETURNS TEXT AS $$
	DECLARE
		I_HRA HRA;
		RADEK_PAPIRU TEXT := '';
		NAZEV_ZNACKY VARCHAR(10) := '';
		ZASTAVOVACI_PODMINKA INTEGER := 0;
		ID_HRAC_AKTUALNI INTEGER;
		ID_HRAC_PRVNI INTEGER;
	BEGIN
		SELECT * INTO I_HRA FROM HRA WHERE ID = ID_HRA;	
		SELECT ID_PRVNI_HRAC INTO ID_HRAC_PRVNI FROM HRA WHERE ID = ID_HRA;
		
		LOOP
			EXIT WHEN ZASTAVOVACI_PODMINKA = I_HRA.SIRKA;		

			SELECT ID_HRAJICI_HRAC INTO ID_HRAC_AKTUALNI FROM TAH WHERE X = ZASTAVOVACI_PODMINKA + 1 AND Y = RADEK_HRY AND ID_AKTUALNI_HRA = ID_HRA;
			
			IF ID_HRAC_AKTUALNI IS NULL THEN
				RADEK_PAPIRU := RADEK_PAPIRU || ' ';
			ELSE
				IF ID_HRAC_AKTUALNI = ID_HRAC_PRVNI THEN
					RADEK_PAPIRU := RADEK_PAPIRU || 'O';
				ELSE
					RADEK_PAPIRU := RADEK_PAPIRU || 'X';
				END IF;					
			END IF;
				
			IF ZASTAVOVACI_PODMINKA < I_HRA.SIRKA THEN
				RADEK_PAPIRU := RADEK_PAPIRU || '|';
			END IF;

			ZASTAVOVACI_PODMINKA := ZASTAVOVACI_PODMINKA + 1;
		END LOOP;
		
		RETURN RADEK_PAPIRU;
	END;
	$$ LANGUAGE plpgsql;
	
-- Zjištění herního času dané hry pro daného hráče.	
CREATE OR REPLACE FUNCTION HERNI_CAS(ID_HRA INTEGER, ID_HRAC INTEGER) RETURNS INTEGER AS $$
	DECLARE
		HRACI_CASY_PRVNI_HRAC TIMESTAMP(6)[];
		POCET_CASU_PRVNI_HRAC INTEGER;
		HRACI_CASY_DRUHY_HRAC TIMESTAMP(6)[];
		POCET_CASU_DRUHY_HRAC INTEGER;		
		VYSLEDNY_CAS INTEGER := 0;
		PRUBEZNY_CAS INTEGER := 0;
		ZASTAVOVACI_PODMINKA INTEGER := 0;
		i_HRA HRA;
	BEGIN
		SELECT * INTO I_HRA FROM HRA WHERE ID = ID_HRA;	
		
		HRACI_CASY_PRVNI_HRAC := ARRAY(SELECT CAS_TAHU FROM TAH WHERE ID_AKTUALNI_HRA = ID_HRA AND ID_HRAJICI_HRAC = ID_HRAC);
		IF ID_HRAC = I_HRA.ID_PRVNI_HRAC THEN
			HRACI_CASY_DRUHY_HRAC := ARRAY(SELECT CAS_TAHU FROM TAH WHERE ID_AKTUALNI_HRA = ID_HRA AND ID_HRAJICI_HRAC = I_HRA.ID_DRUHY_HRAC);
		ELSE
			HRACI_CASY_DRUHY_HRAC := ARRAY(SELECT CAS_TAHU FROM TAH WHERE ID_AKTUALNI_HRA = ID_HRA AND ID_HRAJICI_HRAC = I_HRA.ID_PRVNI_HRAC);
		END IF;
		
		SELECT CARDINALITY(HRACI_CASY_PRVNI_HRAC) INTO POCET_CASU_PRVNI_HRAC;
		SELECT CARDINALITY(HRACI_CASY_DRUHY_HRAC) INTO POCET_CASU_DRUHY_HRAC;
		
		LOOP
			EXIT WHEN ZASTAVOVACI_PODMINKA = POCET_CASU_PRVNI_HRAC;
			
			IF ID_HRAC = I_HRA.ID_PRVNI_HRAC THEN
				IF ZASTAVOVACI_PODMINKA = 0 THEN
					SELECT ((EXTRACT (EPOCH FROM (HRACI_CASY_PRVNI_HRAC[ZASTAVOVACI_PODMINKA + 1]::TIMESTAMP - I_HRA.ZACATEK_HRY::TIMESTAMP))))::INTEGER INTO PRUBEZNY_CAS;
					VYSLEDNY_CAS := VYSLEDNY_CAS + PRUBEZNY_CAS;
				ELSE
					IF ZASTAVOVACI_PODMINKA > POCET_CASU_DRUHY_HRAC THEN
						RETURN VYSLEDNY_CAS;
					END IF;
					
					SELECT ((EXTRACT (EPOCH FROM (HRACI_CASY_PRVNI_HRAC[ZASTAVOVACI_PODMINKA + 1]::TIMESTAMP - HRACI_CASY_DRUHY_HRAC[ZASTAVOVACI_PODMINKA]::TIMESTAMP))))::INTEGER INTO PRUBEZNY_CAS;
					
					VYSLEDNY_CAS := VYSLEDNY_CAS + PRUBEZNY_CAS;
				END IF;
			ELSE
				SELECT ((EXTRACT (EPOCH FROM (HRACI_CASY_PRVNI_HRAC[ZASTAVOVACI_PODMINKA + 1]::TIMESTAMP - HRACI_CASY_DRUHY_HRAC[ZASTAVOVACI_PODMINKA+ 1]::TIMESTAMP))))::INTEGER INTO PRUBEZNY_CAS;
				
				VYSLEDNY_CAS := VYSLEDNY_CAS + PRUBEZNY_CAS;
			END IF;
			
			ZASTAVOVACI_PODMINKA := ZASTAVOVACI_PODMINKA + 1;
		END LOOP;
		RETURN VYSLEDNY_CAS;
		
	END;
	$$ LANGUAGE plpgsql;
	
-- Zjištění zda hra skončila remízou nebo ne.
CREATE OR REPLACE FUNCTION REMIZA(ID_HRA INTEGER) RETURNS BOOLEAN AS $$
	DECLARE
		I_HRA HRA;
	BEGIN
		SELECT * INTO I_HRA FROM HRA WHERE ID = ID_HRA;
		IF I_HRA.ID_STAV = 4 THEN
			RETURN TRUE;
		END IF;
		
		RETURN FALSE;
	END;
	$$ LANGUAGE plpgsql;

-- Zjištění zda hra skončila výhrou nebo ne.
CREATE OR REPLACE FUNCTION VYHRA(ID_HRA INTEGER) RETURNS BOOLEAN AS $$
	DECLARE
		I_HRA HRA;
		ID_HRAC_PRVNI INTEGER;
		ID_HRAC_DRUHY INTEGER;
	BEGIN
		SELECT * INTO I_HRA FROM HRA WHERE ID = ID_HRA;
		SELECT ID_PRVNI_HRAC INTO ID_HRAC_PRVNI FROM HRA WHERE ID = ID_HRA;
		SELECT ID_DRUHY_HRAC INTO ID_HRAC_DRUHY FROM HRA WHERE ID = ID_HRA;
		
		IF I_HRA.ID_STAV = 2 OR I_HRA.ID_STAV = 3 THEN
			RETURN TRUE;
		END IF;
		
		RETURN FALSE;		
	END;
	$$ LANGUAGE plpgsql;


------------------------------
-- VYTVORENI PROCEDUR.
------------------------------


-- Procedura pro kontrolu výstupu z funkce SPATNY_PARAMETR.
CREATE OR REPLACE PROCEDURE ZABRAN_HRE (POCET_RADKU INTEGER, POCET_SLOUPCU INTEGER, VELIKOST_RADY INTEGER) AS $$
	DECLARE	
		NAVRATOVA_HODNOTA INTEGER;
	BEGIN		
		NAVRATOVA_HODNOTA := SPATNY_PARAMETR(POCET_RADKU, POCET_SLOUPCU, VELIKOST_RADY);
		
		IF NAVRATOVA_HODNOTA = 1 THEN
			RAISE EXCEPTION 'Příliš malý počet řádků na papíru (menší než 5)!';
		ELSIF NAVRATOVA_HODNOTA = 2 THEN
			RAISE EXCEPTION 'Příliš velký počet řádků na papíru (větší než 20)!';
		ELSIF NAVRATOVA_HODNOTA = 3 THEN
			RAISE EXCEPTION 'Příliš malý počet sloupců na papíru (menší než 5)!';
		ELSIF NAVRATOVA_HODNOTA = 4 THEN
			RAISE EXCEPTION 'Příliš velký počet sloupců na papíru (větší než 20)!';
		ELSIF NAVRATOVA_HODNOTA = 5 THEN			
			RAISE EXCEPTION 'Příliš malý počet znaků ve vítězné řadě (menší než 5)!';
		ELSIF NAVRATOVA_HODNOTA = 6 THEN
			RAISE EXCEPTION 'Příliš velký počet znaků ve vítězné řadě (větší než 15)!';
		ELSIF NAVRATOVA_HODNOTA = 7 THEN
			RAISE EXCEPTION 'Vítězná řada delší, než šířka papíru!';
		ELSIF NAVRATOVA_HODNOTA = 8 THEN
			RAISE EXCEPTION 'Vítězná řada delší, než výška papíru!';
		END IF;
	END;
	$$ LANGUAGE plpgsql;
	
-- Procedura pro kontrolu tahu.	
CREATE OR REPLACE PROCEDURE ZABRAN_TAHU (ID_HRA INTEGER, ID_HRAC INTEGER, TAH_X INTEGER, TAH_Y INTEGER) AS $$
	DECLARE
		I_HRA HRA;
		TAH_EXISTUJE INTEGER;
		ID_POSLEDNI_HRAJICI_HRAC INTEGER;
	BEGIN
		SELECT * INTO I_HRA FROM HRA WHERE ID = ID_HRA;
				
		IF ID_HRAC != I_HRA.ID_PRVNI_HRAC AND ID_HRAC != I_HRA.ID_DRUHY_HRAC THEN
			RAISE EXCEPTION 'Zadaný hráč nehraje v dané hře!';
		END IF;
			
		SELECT ID_HRAJICI_HRAC INTO ID_POSLEDNI_HRAJICI_HRAC FROM TAH WHERE ID_AKTUALNI_HRA = ID_HRA ORDER BY CAS_TAHU DESC LIMIT 1;			
		IF ID_POSLEDNI_HRAJICI_HRAC IS NOT NULL THEN
			IF ID_POSLEDNI_HRAJICI_HRAC = ID_HRAC THEN
				RAISE EXCEPTION 'Zadaný hráč nemůže hrát, protože se čeká na tah protivníka!';
			END IF;
		ELSE
			IF I_HRA.ID_PRVNI_HRAC != ID_HRAC THEN
				RAISE EXCEPTION 'Zadaný hráč nemůže hrát, protože se čeká na tah protivníka!';
			END IF;
		END IF;				
			
		SELECT COUNT(*) INTO TAH_EXISTUJE FROM (SELECT * FROM TAH WHERE ID_AKTUALNI_HRA = ID_HRA AND X = TAH_X AND Y = TAH_Y) AS EXISTUJICI_TAH;		
		IF TAH_EXISTUJE > 0 THEN
			RAISE EXCEPTION 'Na zadané pozici už existuje značka!';
		END IF;	
		
		IF TAH_X < 1 THEN
			RAISE EXCEPTION 'Nelze vložit bod s X-hodnotou menší než 1!';
		END IF;
		
		IF TAH_X > I_HRA.SIRKA THEN
			RAISE EXCEPTION 'Zadané X je větší než je šířka papíru!';
		END IF;
		
		if TAH_Y < 1 THEN
			RAISE EXCEPTION 'Nelze vložit bod s Y-hodnotou menší než 1!';
		END IF;
		
		IF TAH_Y > I_HRA.VYSKA THEN
			RAISE EXCEPTION 'Zadané Y je větší než je výška papíru!';
		END IF;
		
		IF I_HRA.ID_STAV BETWEEN 2 AND 4 THEN
			RAISE EXCEPTION 'V zadané hře už nelze provádět žádné další tahy, protože je ukončená!';
		END IF;			
				
					
	END;
	$$ LANGUAGE plpgsql;
	
-- Procedura pro aktualizace statistik hráčů v dané ukončené hře.
CREATE OR REPLACE PROCEDURE STATISTIKY (ID_HRA INTEGER) AS $$
	DECLARE
		I_HRA HRA;
	BEGIN
		SELECT * INTO I_HRA FROM HRA WHERE ID = ID_HRA;
		
		IF I_HRA.ID_STAV = 2 THEN
			UPDATE HRAC SET TAH_PRVNI_POCET_VYHER = ((SELECT TAH_PRVNI_POCET_VYHER FROM HRAC WHERE ID = I_HRA.ID_PRVNI_HRAC) + 1) WHERE ID = I_HRA.ID_PRVNI_HRAC;
			UPDATE HRAC SET TAH_DRUHY_POCET_PROHER = ((SELECT TAH_DRUHY_POCET_PROHER FROM HRAC WHERE ID = I_HRA.ID_DRUHY_HRAC) + 1) WHERE ID = I_HRA.ID_DRUHY_HRAC;
		ELSIF I_HRA.ID_STAV = 3 THEN
			UPDATE HRAC SET TAH_PRVNI_POCET_PROHER = ((SELECT TAH_PRVNI_POCET_PROHER FROM HRAC WHERE ID = I_HRA.ID_PRVNI_HRAC) + 1) WHERE ID = I_HRA.ID_PRVNI_HRAC;
			UPDATE HRAC SET TAH_DRUHY_POCET_VYHER = ((SELECT TAH_DRUHY_POCET_VYHER FROM HRAC WHERE ID = I_HRA.ID_DRUHY_HRAC) + 1) WHERE ID = I_HRA.ID_DRUHY_HRAC;
		ELSIF I_HRA.ID_STAV = 4 THEN
			UPDATE HRAC SET TAH_PRVNI_POCET_REMIZ = ((SELECT TAH_PRVNI_POCET_REMIZ FROM HRAC WHERE ID = I_HRA.ID_PRVNI_HRAC) + 1) WHERE ID = I_HRA.ID_PRVNI_HRAC;
			UPDATE HRAC SET TAH_DRUHY_POCET_REMIZ = ((SELECT TAH_DRUHY_POCET_REMIZ FROM HRAC WHERE ID = I_HRA.ID_DRUHY_HRAC) + 1) WHERE ID = I_HRA.ID_DRUHY_HRAC;
		END IF;
	END;
	$$ LANGUAGE plpgsql;
	
-- Procedura pro aktualizaci herních časů hráčů v dané ukončené hře.
CREATE OR REPLACE PROCEDURE KONEC_HRY (ID_HRA INTEGER) AS $$
	DECLARE
		I_HRA HRA;
	BEGIN
		SELECT * INTO I_HRA FROM HRA WHERE ID = ID_HRA;
		
		IF I_HRA.ID_STAV = 1 THEN
			RETURN;
		END IF;
		UPDATE HRA SET CAS_PRVNI_HRAC = HERNI_CAS(I_HRA.ID, I_HRA.ID_PRVNI_HRAC), CAS_DRUHY_HRAC = HERNI_CAS(I_HRA.ID, I_HRA.ID_DRUHY_HRAC) WHERE ID = ID_HRA;
	END;
	$$ LANGUAGE plpgsql;
	
	
------------------------------
-- SMAZANI TRIGGERU.
------------------------------
	

DROP TRIGGER IF EXISTS ZKONTROLUJ_PARAMETRY ON HRA;
DROP TRIGGER IF EXISTS VYTVOR_RADKY ON HRA;
DROP TRIGGER IF EXISTS ZKONTROLUJ_TAH ON TAH;
DROP TRIGGER IF EXISTS HRA_DOHRANA ON HRA;
DROP TRIGGER IF EXISTS KONTROLA_STAVU_HRY ON TAH;
	
	
------------------------------
-- VYTVORENI TRIGGERU.
------------------------------


-- Funkce a trigger pro kontrolu vstupních parametrů.
CREATE OR REPLACE FUNCTION VYTVOR_TRIGGER_ZKONTROLUJ_PARAMETRY() RETURNS TRIGGER AS $VYTVOR_TRIGGER_ZKONTROLUJ_PARAMETRY$
	BEGIN
		CALL ZABRAN_HRE(NEW.VYSKA, NEW.SIRKA, NEW.VELIKOST_RADY);
		RETURN NEW;
	END;
	$VYTVOR_TRIGGER_ZKONTROLUJ_PARAMETRY$ LANGUAGE plpgsql;
	
CREATE TRIGGER ZKONTROLUJ_PARAMETRY BEFORE INSERT ON HRA FOR EACH ROW EXECUTE PROCEDURE VYTVOR_TRIGGER_ZKONTROLUJ_PARAMETRY();

-- Funkce a trigger pro vytvoření řádků při vytvoření nové hry.
CREATE OR REPLACE FUNCTION VYTVOR_TRIGGER_VYTVOR_RADKY() RETURNS TRIGGER AS $VYTVOR_TRIGGER_VYTVOR_RADKY$
	DECLARE
		AKTUALNI_RADKA INTEGER := 0;
		POSLEDNI_INDEX INTEGER := 0;
	BEGIN
		LOOP
			EXIT WHEN AKTUALNI_RADKA = NEW.VYSKA;
			
			SELECT ID INTO POSLEDNI_INDEX FROM RADKY_HRY ORDER BY ID DESC LIMIT 1;
			
			IF POSLEDNI_INDEX IS NULL THEN
				POSLEDNI_INDEX := 0;
			END IF;
			
			INSERT INTO RADKY_HRY(ID, ID_HRA, CISLO_RADKY) VALUES (POSLEDNI_INDEX + 1, NEW.ID, AKTUALNI_RADKA + 1);
			
			AKTUALNI_RADKA := AKTUALNI_RADKA + 1;
		END LOOP;
		
		RETURN NEW;
	END;
	$VYTVOR_TRIGGER_VYTVOR_RADKY$ LANGUAGE plpgsql;
	
CREATE TRIGGER VYTVOR_PARAMETRY AFTER INSERT ON HRA FOR EACH ROW EXECUTE PROCEDURE VYTVOR_TRIGGER_VYTVOR_RADKY();

-- Funkce a trigger pro kontrolu nového tahu.
CREATE OR REPLACE FUNCTION VYTVOR_TRIGGER_ZKONTROLUJ_TAH() RETURNS TRIGGER AS $VYTVOR_TRIGGER_ZKONTROLUJ_TAH$
	BEGIN
		CALL ZABRAN_TAHU(NEW.ID_AKTUALNI_HRA, NEW.ID_HRAJICI_HRAC, NEW.X, NEW.Y);
		RETURN NEW;
	END;
	$VYTVOR_TRIGGER_ZKONTROLUJ_TAH$ LANGUAGE plpgsql;	
	
CREATE TRIGGER ZKONTROLUJ_TAH BEFORE INSERT ON TAH FOR EACH ROW EXECUTE PROCEDURE VYTVOR_TRIGGER_ZKONTROLUJ_TAH();

-- Funkce a trigger pro aktualizaci časů hráčů a jejich statistik v již dohrané hře.
CREATE OR REPLACE FUNCTION VYTVOR_TRIGGER_HRA_DOHRANA() RETURNS TRIGGER AS $VYTVOR_TRIGGER_HRA_DOHRANA$
	DECLARE
	BEGIN		
		IF VYHRA(NEW.ID) = TRUE OR REMIZA(NEW.ID) = TRUE THEN
			CALL KONEC_HRY(NEW.ID);
			CALL STATISTIKY(NEW.ID);
		END IF;

		RETURN NEW;
	END;
	$VYTVOR_TRIGGER_HRA_DOHRANA$ LANGUAGE plpgsql;	
	
CREATE TRIGGER HRA_DOHRANA AFTER UPDATE OF ID_STAV ON HRA FOR EACH ROW EXECUTE PROCEDURE VYTVOR_TRIGGER_HRA_DOHRANA();

-- Funkce a trigger pro hlídání a aktualizaci stavu hry (zda po posledním tahu hra neskončila remízou/výhrou jednoho hráče).
CREATE OR REPLACE FUNCTION VYTVOR_TRIGGER_KONTROLA_STAVU_HRY() RETURNS TRIGGER AS $VYTVOR_TRIGGER_KONTROLA_STAVU_HRY$
	DECLARE
		STAV_HRY INTEGER;		
		NOVY_STAV_HRY INTEGER;
		POCET_ZNACEK_ZA_SEBOU INTEGER := 1;
		
		AKTUALNI_X INTEGER := 0;
		AKTUALNI_Y INTEGER := 0;
		
		RADA_EXISTUJE BOOLEAN := FALSE;
		ZASTAVOVACI_PODMINKA INTEGER := 0;
		
		I_HRA HRA;
	BEGIN			
		SELECT * FROM HRA INTO I_HRA WHERE ID = NEW.ID_AKTUALNI_HRA;
		NOVY_STAV_HRY := I_HRA.ID_STAV;										
		
		-- Kontrola horizontálně (nejdříve od NEW.X doleva, potom doprava).	
		AKTUALNI_Y = NEW.Y;								
		ZASTAVOVACI_PODMINKA = 0;
		LOOP
			EXIT WHEN ZASTAVOVACI_PODMINKA = 2;
			
			IF ZASTAVOVACI_PODMINKA = 0 THEN
				AKTUALNI_X = NEW.X - 1;
			ELSE
				AKTUALNI_X = NEW.X + 1;
			END IF;
			
			LOOP
				IF RADA_EXISTUJE = TRUE THEN
					EXIT;
				END IF;
			
				PERFORM 1 FROM TAH WHERE ID_AKTUALNI_HRA = NEW.ID_AKTUALNI_HRA AND X = AKTUALNI_X AND Y = AKTUALNI_Y LIMIT 1;
		
				IF FOUND THEN					
					POCET_ZNACEK_ZA_SEBOU = POCET_ZNACEK_ZA_SEBOU + 1;
				ELSE
					EXIT;
				END IF;			
			
				IF POCET_ZNACEK_ZA_SEBOU = I_HRA.VELIKOST_RADY THEN
					RADA_EXISTUJE = TRUE;
					EXIT;
				END IF;
				
				IF ZASTAVOVACI_PODMINKA = 0 THEN
					AKTUALNI_X = AKTUALNI_X - 1;
				ELSE
					AKTUALNI_X = AKTUALNI_X + 1;
				END IF;
			END LOOP;
			
			ZASTAVOVACI_PODMINKA = ZASTAVOVACI_PODMINKA + 1;
		END LOOP;			
		
		-- Kontrola vertikálně (nejdříve od NEW.Y nahoru, poté dolu).	
		POCET_ZNACEK_ZA_SEBOU = 1;		
		AKTUALNI_X = NEW.X;		
		ZASTAVOVACI_PODMINKA = 0;
		LOOP
			EXIT WHEN ZASTAVOVACI_PODMINKA = 2;
			
			IF ZASTAVOVACI_PODMINKA = 0 THEN
				AKTUALNI_Y = NEW.Y - 1;
			ELSE
				AKTUALNI_Y = NEW.Y + 1;
			END IF;
			
			LOOP
				IF RADA_EXISTUJE = TRUE THEN
					EXIT;
				END IF;
			
				PERFORM 1 FROM TAH WHERE ID_AKTUALNI_HRA = NEW.ID_AKTUALNI_HRA AND X = AKTUALNI_X AND Y = AKTUALNI_Y LIMIT 1;
		
				IF FOUND THEN
					POCET_ZNACEK_ZA_SEBOU = POCET_ZNACEK_ZA_SEBOU + 1;
				ELSE
					EXIT;
				END IF;			
			
				IF POCET_ZNACEK_ZA_SEBOU = I_HRA.VELIKOST_RADY THEN
					RADA_EXISTUJE = TRUE;
					EXIT;
				END IF;
				
				IF ZASTAVOVACI_PODMINKA = 0 THEN
					AKTUALNI_Y = AKTUALNI_Y - 1;
				ELSE
					AKTUALNI_Y = AKTUALNI_Y + 1;
				END IF;
			END LOOP;
			
			ZASTAVOVACI_PODMINKA = ZASTAVOVACI_PODMINKA + 1;
		END LOOP;
		
		
		-- Kontrola šikmo levá horní-pravá dolní (kontrola nejdříve od zadaného bodu doleva nahoru, potom doprava dolu).
		POCET_ZNACEK_ZA_SEBOU = 1;		
		ZASTAVOVACI_PODMINKA = 0;
		LOOP
			EXIT WHEN ZASTAVOVACI_PODMINKA = 2;
			
			IF ZASTAVOVACI_PODMINKA = 0 THEN
				AKTUALNI_X = NEW.X - 1;
				AKTUALNI_Y = NEW.Y - 1;
			ELSE
				AKTUALNI_X = NEW.X + 1;
				AKTUALNI_Y = NEW.Y + 1;
			END IF;
			
			LOOP
				IF RADA_EXISTUJE = TRUE THEN
					EXIT;
				END IF;
			
				PERFORM 1 FROM TAH WHERE ID_AKTUALNI_HRA = NEW.ID_AKTUALNI_HRA AND X = AKTUALNI_X AND Y = AKTUALNI_Y LIMIT 1;
		
				IF FOUND THEN
					POCET_ZNACEK_ZA_SEBOU = POCET_ZNACEK_ZA_SEBOU + 1;
				ELSE
					EXIT;
				END IF;			
			
				IF POCET_ZNACEK_ZA_SEBOU = I_HRA.VELIKOST_RADY THEN
					RADA_EXISTUJE = TRUE;
					EXIT;
				END IF;
				
				IF ZASTAVOVACI_PODMINKA = 0 THEN
					AKTUALNI_X = AKTUALNI_X - 1;
					AKTUALNI_Y = AKTUALNI_Y - 1;
			ELSE
					AKTUALNI_X = AKTUALNI_X + 1;
					AKTUALNI_Y = AKTUALNI_Y + 1;
				END IF;
			END LOOP;
			
			ZASTAVOVACI_PODMINKA = ZASTAVOVACI_PODMINKA + 1;
		END LOOP;
		
		
		-- Kontrola šikmo levá dolní-pravá horní (kontrola nejdříve od zadaného bodu doleva dolu, potom doprava nahoru).
		POCET_ZNACEK_ZA_SEBOU = 1;		
		ZASTAVOVACI_PODMINKA = 0;
		LOOP
			EXIT WHEN ZASTAVOVACI_PODMINKA = 2;
			
			IF ZASTAVOVACI_PODMINKA = 0 THEN
				AKTUALNI_X = NEW.X - 1;
				AKTUALNI_Y = NEW.Y + 1;
			ELSE
				AKTUALNI_X = NEW.X + 1;
				AKTUALNI_Y = NEW.Y - 1;
			END IF;
			
			LOOP
				IF RADA_EXISTUJE = TRUE THEN
					EXIT;
				END IF;
			
				PERFORM 1 FROM TAH WHERE ID_AKTUALNI_HRA = NEW.ID_AKTUALNI_HRA AND X = AKTUALNI_X AND Y = AKTUALNI_Y LIMIT 1;
		
				IF FOUND THEN
					POCET_ZNACEK_ZA_SEBOU = POCET_ZNACEK_ZA_SEBOU + 1;
				ELSE
					EXIT;
				END IF;			
			
				IF POCET_ZNACEK_ZA_SEBOU = I_HRA.VELIKOST_RADY THEN
					RADA_EXISTUJE = TRUE;
					EXIT;
				END IF;
				
				IF ZASTAVOVACI_PODMINKA = 0 THEN
					AKTUALNI_X = AKTUALNI_X - 1;
					AKTUALNI_Y = AKTUALNI_Y + 1;
			ELSE
					AKTUALNI_X = AKTUALNI_X + 1;
					AKTUALNI_Y = AKTUALNI_Y - 1;
				END IF;
			END LOOP;
			
			ZASTAVOVACI_PODMINKA = ZASTAVOVACI_PODMINKA + 1;
		END LOOP;
			

		IF RADA_EXISTUJE = TRUE THEN
			IF NEW.ID_HRAJICI_HRAC = I_HRA.ID_PRVNI_HRAC THEN
				NOVY_STAV_HRY = 2;
			ELSE
				NOVY_STAV_HRY = 3;
			END IF;
		END IF;
		-- TODO ELSE KONTROLA JESTLI REMIZA
		
		IF NOVY_STAV_HRY != I_HRA.ID_STAV THEN
			UPDATE HRA SET ID_STAV = NOVY_STAV_HRY WHERE ID = NEW.ID_AKTUALNI_HRA;
		END IF;	
		
		RETURN NEW;
	END;
	$VYTVOR_TRIGGER_KONTROLA_STAVU_HRY$ LANGUAGE plpgsql;	
	
CREATE TRIGGER KONTROLA_STAVU_HRY AFTER INSERT ON TAH FOR EACH ROW EXECUTE PROCEDURE VYTVOR_TRIGGER_KONTROLA_STAVU_HRY();
	
	
------------------------------
-- VYTVORENI POHLEDU.
------------------------------

-- Pohled vypisující celý papír.
CREATE OR REPLACE VIEW PAPIR(ID_HRA) AS
SELECT 
	ID_HRA, 
	CISLO_RADKY,
	RADEK_PAPIRU(ID_HRA, CISLO_RADKY)
FROM RADKY_HRY;

-- Pohled vypisující informace o hrách, ve kterých zvítězil první hráč.
CREATE OR REPLACE VIEW VYHRY_ZACINAJICI AS
SELECT 
	HRA.ID AS ID_HRY, 
	HRA.SIRKA, 
	HRA.VYSKA, 
	HRA.VELIKOST_RADY, 
	CAS_PRVNI_HRAC + CAS_DRUHY_HRAC AS DOBA_HRANI_HRY,
	(SELECT COUNT(*) FROM (SELECT * FROM TAH WHERE ID_AKTUALNI_HRA = HRA.ID) AS TEMP_TAHY) AS POCET_TAHU,
	H1.JMENO AS ZACINAJICI_HRAC,
	H2.JMENO AS DRUHY_HRAC,
	H1.JMENO AS VITEZ
	FROM HRA
		LEFT JOIN HRAC AS H1
		ON H1.ID = HRA.ID_PRVNI_HRAC
		LEFT JOIN HRAC AS H2
		ON H2.ID = HRA.ID_DRUHY_HRAC
	WHERE HRA.ID_STAV = 2;

-- Pohled vypisující informace o hrách, ve kterých prohrál první hráč.
CREATE OR REPLACE VIEW PROHRY_ZACINAJICI AS
SELECT 
	HRA.ID AS ID_HRY, 
	HRA.SIRKA, 
	HRA.VYSKA, 
	HRA.VELIKOST_RADY, 
	CAS_PRVNI_HRAC + CAS_DRUHY_HRAC AS DOBA_HRANI_HRY,
	(SELECT COUNT(*) FROM (SELECT * FROM TAH WHERE ID_AKTUALNI_HRA = HRA.ID) AS TEMP_TAHY) AS POCET_TAHU,
	H1.JMENO AS ZACINAJICI_HRAC,
	H2.JMENO AS DRUHY_HRAC,
	H1.JMENO AS PORAZENY
	FROM HRA
		LEFT JOIN HRAC AS H1
		ON H1.ID = HRA.ID_PRVNI_HRAC
		LEFT JOIN HRAC AS H2
		ON H2.ID = HRA.ID_DRUHY_HRAC
	WHERE HRA.ID_STAV = 3;

-- Pohled vypisující informace o hrách, které skončili remízou.
CREATE OR REPLACE VIEW REMIZY AS
SELECT 
	HRA.ID AS ID_HRY, 
	HRA.SIRKA, 
	HRA.VYSKA, 
	HRA.VELIKOST_RADY, 
	CAS_PRVNI_HRAC + CAS_DRUHY_HRAC AS DOBA_HRANI_HRY,
	H1.JMENO AS ZACINAJICI_HRAC,
	H2.JMENO AS DRUHY_HRAC
	FROM HRA
		LEFT JOIN HRAC AS H1
		ON H1.ID = HRA.ID_PRVNI_HRAC
		LEFT JOIN HRAC AS H2
		ON H2.ID = HRA.ID_DRUHY_HRAC	
	WHERE REMIZA(HRA.ID);